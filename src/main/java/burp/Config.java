package burp;


import yaml.YamlUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Config {
    private JPanel one;
    private JTextField txtfield1;
    public String yaml_path = BurpExtender.Yaml_Path;
    public JSpinner spinner1;
    private BurpExtender burp;
    public JTabbedPane ruleTabbedPane;
    public TabTitleEditListener ruleSwitch;
    protected static JPopupMenu tabMenu = new JPopupMenu();
    private JMenuItem closeTabMenuItem = new JMenuItem("Delete");
    private static int RulesInt = 0;

    public static String new_Rules() {
        RulesInt += 1;
        return "New " + RulesInt;
    }


    public void newTab() {
        Object[][] data = new Object[][]{{false, "New Name", "(New Regex)", "gray", "any", "nfa", false}};
        insertTab(ruleTabbedPane, Config.new_Rules(), data);
    }

    public void insertTab(JTabbedPane pane, String title, Object[][] data) {
        pane.addTab(title, new JLabel());
        pane.remove(pane.getSelectedIndex());
        pane.addTab("...", new JLabel());
    }

    public void closeTabActionPerformed(ActionEvent e) {

        if (ruleTabbedPane.getTabCount() > 2) {
            Dialog frame = new JDialog();//构造一个新的JFrame，作为新窗口。
            frame.setBounds(
                    new Rectangle(
                            // 让新窗口与SwingTest窗口示例错开50像素。
                            620,
                            300,
                            // 窗口总大小-500像素
                            200,
                            100
                    )
            );


            JPanel xin = new JPanel();
            xin.setLayout(null);

            JLabel Tips = new JLabel("Are you sure you want to delete");
            Tips.setBounds(20, 10, 200, 20);
            xin.add(Tips);

            // Ok
            JButton Ok_button = new JButton("Yes");
            Ok_button.setBounds(120, 40, 60, 20);
            xin.add(Ok_button);
            Ok_button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String type = ruleTabbedPane.getTitleAt(ruleTabbedPane.getSelectedIndex());
                    View Remove_view = burp.views.get(type);
                    if (Remove_view != null) {
                        for (View.LogEntry l : Remove_view.log) {
                            YamlUtil.removeYaml(l.id, BurpExtender.Yaml_Path);
                        }
                    }
                    ruleTabbedPane.remove(ruleTabbedPane.getSelectedIndex());
                    frame.dispose();

                }
            });

            // no
            JButton No_button = new JButton("NO");
            No_button.setBounds(30, 40, 60, 20);
            xin.add(No_button);
            No_button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    frame.dispose();

                }
            });


            ((JDialog) frame).getContentPane().add(xin);
            frame.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);    // 设置模式类型。
            frame.setVisible(true);


        }
    }

    public Config(BurpExtender burp) {
        tabMenu.add(closeTabMenuItem);
        closeTabMenuItem.addActionListener(e -> closeTabActionPerformed(e));
        this.burp = burp;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        one = new JPanel();
        one.setLayout(null);
        one.setBounds(0, 0, 1180, 500);


        // Yaml File Path 文本展示框
        JLabel yaml_Path = new JLabel("Yaml File Path:");
        yaml_Path.setBounds(5, 20, 100, 50);

        // 展示路径
        txtfield1 = new JTextField();   //创建文本框
        txtfield1.setText(yaml_path);    //设置文本框的内容
        txtfield1.setEditable(false);
        txtfield1.setBounds(110, 35, 772, 20);


        // Online Update按钮
        JButton Online_Update_button = new JButton("Update");
        Online_Update_button.setBounds(886, 34, 87, 23);
        Online_Update_Yaml(Online_Update_button);

        // load 按钮
        JButton load_button = new JButton("Load Yaml");
        load_button.setBounds(980, 34, 87, 23);
        load_button_Yaml(load_button);

        // 线程选择
        JLabel thread_num = new JLabel("Thread Numbers:");
        thread_num.setBounds(1074, 20, 100, 50);
        SpinnerNumberModel model1 = new SpinnerNumberModel(10, 1, 500, 3);
        this.spinner1 = new JSpinner(model1);
        ((JSpinner.DefaultEditor) this.spinner1.getEditor()).getTextField().setEditable(false);

        this.spinner1.setBounds(1168, 34, 100, 23);




        // add按钮
        JButton add_button = new JButton("Add");
        add_button.setBounds(5, 75, 70, 23);
        Add_Button_Yaml(add_button, yaml_path);

        // Edit按钮
        JButton edit_button = new JButton("Edit");
        edit_button.setBounds(5, 100, 70, 23);
//        Edit_Button_Yaml(edit_button,yaml_path,view_class,log);
        Edit_Button_Yaml(edit_button, yaml_path);

        // Del按钮
        JButton remove_button = new JButton("Del");
        remove_button.setBounds(5, 125, 70, 23);
        Del_Button_Yaml(remove_button, yaml_path);



        // 展示界面容器
        ruleTabbedPane = new JTabbedPane();
        this.ruleSwitch = new TabTitleEditListener(ruleTabbedPane, this.burp);
        ruleTabbedPane.setBounds(80, 60, 1185, 740);
        Bfunc.show_yaml(burp);
        ruleTabbedPane.addMouseListener(ruleSwitch);


//        // Switch 文本展示框
//        JLabel Expansion_switch = new JLabel("Extend Switch:");
//        Expansion_switch.setBounds(5, -10, 100, 50);

        // 开启按钮
//        JButton on_off_button = new JButton("Stop");
        JButton on_off_button = new JButton("Start");
        on_off_button.setBounds(20, 5, 70, 23);
        Color Primary = on_off_button.getBackground();
//        on_off_button.setBackground(Color.green);
        on_off_Button_action(on_off_button, Primary);

//        // Switch 文本展示框
//        JLabel Carry_head = new JLabel("Carry Head:");
//        Carry_head.setBounds(224, -10, 100, 50);

        // 携带head按钮
        JButton carry_head_button = new JButton("Head_On");
        carry_head_button.setBounds(150, 5, 90, 23);
        carry_head_Button_action(carry_head_button, Primary);


        // DomainScan按钮
        JButton DomainScan_button = new JButton("DomainScan_On");
        DomainScan_button.setBounds(300, 5, 90, 23);
        DomainScan_Button_action(DomainScan_button, DomainScan_button.getBackground());



        // bypass按钮
        JButton bypass_button = new JButton("Bypass_On");
        bypass_button.setBounds(450, 5, 90, 23);
        bypass_Button_action(bypass_button, bypass_button.getBackground());



        // Filter_Host 文本展示框
        JLabel Filter_Host = new JLabel("Filter_Host:");
        Filter_Host.setBounds(623, -10, 100, 50);

        // Host 输入框
        JTextField Host_txtfield = new JTextField();   //创建文本框
        Host_txtfield.setText("*");    //设置文本框的内容
        Host_txtfield.setBounds(698, 5, 572, 20);
        burp.Host_txtfield = Host_txtfield;


//        添加到主面板
        one.add(yaml_Path);
        one.add(txtfield1);
        one.add(Online_Update_button);
        one.add(load_button);
        one.add(DomainScan_button);
        one.add(bypass_button);
        one.add(add_button);
        one.add(edit_button);
        one.add(remove_button);
        one.add(ruleTabbedPane);
        one.add(thread_num);
        one.add(spinner1);
//        one.add(Expansion_switch);
        one.add(on_off_button);
//        one.add(Carry_head);
        one.add(carry_head_button);
        one.add(Filter_Host);
        one.add(Host_txtfield);


    }

    private void carry_head_Button_action(JButton Button_one, Color Primary) {

        Button_one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (burp.Carry_head) {
                    burp.Carry_head = false;
                    Button_one.setText("Head_On");
                    Button_one.setBackground(Primary);
                } else {
                    burp.Carry_head = true;
                    Button_one.setText("Head_Off");
                    Button_one.setBackground(Color.green);
                }

            }
        });
    }


    private void on_off_Button_action(JButton Button_one, Color Primary) {

        Button_one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (burp.on_off) {
                    burp.on_off = false;
                    Button_one.setText("Start");
                    Button_one.setBackground(Primary);
                } else {
                    burp.on_off = true;
                    Button_one.setText("Stop");
                    Button_one.setBackground(Color.green);
                }

            }
        });
    }


    private void bypass_Button_action(JButton Button_one, Color Primary) {

        Button_one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (burp.Bypass) {
                    burp.Bypass = false;
                    Button_one.setText("Bypass_On");
                    Button_one.setBackground(Primary);
                } else {
                    burp.Bypass = true;
                    Button_one.setText("Bypass_Off");
                    Button_one.setBackground(Color.green);
                }

            }
        });
    }


    private void DomainScan_Button_action(JButton Button_one, Color Primary) {

        Button_one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (burp.DomainScan) {
                    burp.DomainScan = false;
                    Button_one.setText("DomainScan_On");
                    Button_one.setBackground(Primary);
                } else {
                    burp.DomainScan = true;
                    Button_one.setText("DomainScan_Off");
                    Button_one.setBackground(Color.green);
                }

            }
        });
    }


    private void Online_Update_Yaml(JButton Button_one) {

        Button_one.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                YamlUtil.init_Yaml(burp, one);
            }
        });
    }


     private void Edit_Button_Yaml(JButton Button_one, String yaml_path1) {
        Button_one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JDialog frame = new JDialog();//构造一个新的JFrame，作为新窗口。
                frame.setBounds(
                        new Rectangle(
                                // 让新窗口与SwingTest窗口示例错开50像素。
                                620,
                                300,
                                // 窗口总大小-500像素
                                300,
                                300
                        )
                );
                String type = ruleTabbedPane.getTitleAt(ruleTabbedPane.getSelectedIndex());
                View view_class = burp.views.get(type);

                JPanel xin = new JPanel();
                xin.setLayout(null);
                // Name
                JLabel Name_field = new JLabel("Name :");
                JTextField Name_text = new JTextField();
                Name_text.setText(view_class.Choice.name);
                Name_field.setBounds(10, 5, 40, 20);
                Name_text.setBounds(65, 5, 200, 20);
                xin.add(Name_field);
                xin.add(Name_text);

                // Method
                JLabel Method_field = new JLabel("Method :");
//                JTextField Method_text = new JTextField();
                JComboBox Method_text = new JComboBox();    //创建JComboBox
                Method_text.addItem("GET");    //向下拉列表中添加一项
                Method_text.addItem("POST");    //向下拉列表中添加一项
                Method_text.setSelectedItem(view_class.Choice.method);
                Method_field.setBounds(10, 45, 40, 20);
                Method_text.setBounds(65, 45, 200, 20);
                xin.add(Method_field);
                xin.add(Method_text);

                // Url
                JLabel Url_field = new JLabel("Url :");
                JTextField Url_text = new JTextField();
                Url_text.setText(view_class.Choice.url);
                Url_field.setBounds(10, 85, 40, 20);
                Url_text.setBounds(65, 85, 200, 20);
                xin.add(Url_field);
                xin.add(Url_text);

                // Re
                JLabel Re_field = new JLabel("Re :");
                JTextField Re_text = new JTextField();
                Re_text.setText(view_class.Choice.re);
                Re_field.setBounds(10, 125, 40, 20);
                Re_text.setBounds(65, 125, 200, 20);
                xin.add(Re_field);
                xin.add(Re_text);

                // Info
                JLabel Info_field = new JLabel("Info :");
                JTextField Info_text = new JTextField();
                Info_text.setText(view_class.Choice.info);
                Info_field.setBounds(10, 165, 40, 20);
                Info_text.setBounds(65, 165, 200, 20);
                xin.add(Info_field);
                xin.add(Info_text);

                // state
                JLabel State_field = new JLabel("state :");
                JTextField State_text = new JTextField();
                State_text.setText(view_class.Choice.state);
                State_field.setBounds(10, 205, 40, 20);
                State_text.setBounds(65, 205, 200, 20);
                xin.add(State_field);
                xin.add(State_text);

                // Ok
                JButton Ok_button = new JButton("OK");
                Ok_button.setBounds(200, 245, 60, 20);
                xin.add(Ok_button);
                Ok_button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String name = Name_text.getText();
                        String url = Url_text.getText();
                        String method = (String) Method_text.getSelectedItem();
                        String re = Re_text.getText();
                        String info = Info_text.getText();
                        String state = State_text.getText();
                        Map<String, Object> add_map = new HashMap<String, Object>();
                        add_map.put("id", Integer.parseInt(view_class.Choice.id));
                        add_map.put("type", type);
                        add_map.put("loaded", view_class.Choice.loaded);
                        add_map.put("name", name);
                        add_map.put("method", method);
                        add_map.put("url", url);
                        add_map.put("re", re);
                        add_map.put("info", info);
                        add_map.put("state", state);
                        YamlUtil.updateYaml(add_map, yaml_path1);
//                        burp.views = Bfunc.Get_Views();
//                        Bfunc.show_yaml(burp);
                        Bfunc.show_yaml_view(burp, view_class, type);
                        frame.dispose();

                    }
                });

                // no
                JButton No_button = new JButton("NO");
                No_button.setBounds(130, 245, 60, 20);
                xin.add(No_button);
                No_button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        frame.dispose();

                    }
                });


                frame.getContentPane().add(xin);
                frame.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);    // 设置模式类型。
                frame.setVisible(true);

            }
        });

    }


    private void Del_Button_Yaml(JButton Button_one, String yaml_path1) {

        Button_one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String type = ruleTabbedPane.getTitleAt(ruleTabbedPane.getSelectedIndex());
                View view_class = burp.views.get(type);
                if (view_class.Choice != null) {
                    JDialog frame = new JDialog();//构造一个新的JFrame，作为新窗口。
                    frame.setBounds(
                            new Rectangle(
                                    // 让新窗口与SwingTest窗口示例错开50像素。
                                    620,
                                    300,
                                    // 窗口总大小-500像素
                                    200,
                                    100
                            )
                    );


                    JPanel xin = new JPanel();
                    xin.setLayout(null);

                    JLabel Tips = new JLabel("Are you sure you want to delete");
                    Tips.setBounds(20, 10, 200, 20);
                    xin.add(Tips);

                    // Ok
                    JButton Ok_button = new JButton("Yes");
                    Ok_button.setBounds(120, 40, 60, 20);
                    xin.add(Ok_button);
                    Ok_button.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            YamlUtil.removeYaml(view_class.Choice.id, yaml_path1);
//                            burp.views = Bfunc.Get_Views();
                            Bfunc.show_yaml_view(burp, view_class, type);
                            frame.dispose();

                        }
                    });

                    // no
                    JButton No_button = new JButton("NO");
                    No_button.setBounds(30, 40, 60, 20);
                    xin.add(No_button);
                    No_button.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            frame.dispose();

                        }
                    });


                    frame.getContentPane().add(xin);
                    frame.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);    // 设置模式类型。
                    frame.setVisible(true);

                }

            }
        });
    }


    private void Add_Button_Yaml(JButton Button_one, String yaml_path1) {

        Button_one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                burp.call.printOutput(ruleSwitch.ruleEditTextField.getText().trim());
                JDialog frame = new JDialog();//构造一个新的JFrame，作为新窗口。
                frame.setBounds(
                        new Rectangle(
                                // 让新窗口与SwingTest窗口示例错开50像素。
                                620,
                                300,
                                // 窗口总大小-500像素
                                300,
                                300
                        )
                );
                String type = ruleTabbedPane.getTitleAt(ruleTabbedPane.getSelectedIndex());
                JPanel xin = new JPanel();
                xin.setLayout(null);
                // Name
                JLabel Name_field = new JLabel("Name :");
                JTextField Name_text = new JTextField();
                Name_field.setBounds(10, 5, 40, 20);
                Name_text.setBounds(65, 5, 200, 20);
                xin.add(Name_field);
                xin.add(Name_text);

                // Method
                JLabel Method_field = new JLabel("Method :");
                JComboBox Method_text = new JComboBox();    //创建JComboBox
                Method_text.addItem("GET");    //向下拉列表中添加一项
                Method_text.addItem("POST");    //向下拉列表中添加一项
                Method_field.setBounds(10, 45, 40, 20);
                Method_text.setBounds(65, 45, 200, 20);
                xin.add(Method_field);
                xin.add(Method_text);

                // Url
                JLabel Url_field = new JLabel("Url :");
                JTextField Url_text = new JTextField();
                Url_field.setBounds(10, 85, 40, 20);
                Url_text.setBounds(65, 85, 200, 20);
                xin.add(Url_field);
                xin.add(Url_text);

                // Re
                JLabel Re_field = new JLabel("Re :");
                JTextField Re_text = new JTextField();
                Re_field.setBounds(10, 125, 40, 20);
                Re_text.setBounds(65, 125, 200, 20);
                xin.add(Re_field);
                xin.add(Re_text);

                // Info
                JLabel Info_field = new JLabel("Info :");
                JTextField Info_text = new JTextField();
                Info_field.setBounds(10, 165, 40, 20);
                Info_text.setBounds(65, 165, 200, 20);
                xin.add(Info_field);
                xin.add(Info_text);

                // State
                JLabel State_field = new JLabel("State :");
                JTextField State_text = new JTextField();
                State_field.setBounds(10, 205, 40, 20);
                State_text.setBounds(65, 205, 200, 20);
                xin.add(State_field);
                xin.add(State_text);


                // Ok
                JButton Ok_button = new JButton("OK");
                Ok_button.setBounds(200, 245, 60, 20);
                xin.add(Ok_button);
                Ok_button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        int id = 0;
                        Map<String, Object> Yaml_Map = YamlUtil.readYaml(yaml_path1);
                        List<Map<String, Object>> List1 = (List<Map<String, Object>>) Yaml_Map.get("Load_List");
                        for (Map<String, Object> zidian : List1) {
                            if ((int) zidian.get("id") > id) {
                                id = (int) zidian.get("id");
                            }
                        }
                        id += 1;
                        String name = Name_text.getText();
                        String url = Url_text.getText();
                        String method = (String) Method_text.getSelectedItem();
                        String re = Re_text.getText();
                        String info = Info_text.getText();
                        String state = State_text.getText();
                        Map<String, Object> add_map = new HashMap<String, Object>();
                        add_map.put("type", type);
                        add_map.put("id", id);
                        add_map.put("loaded", true);
                        add_map.put("name", name);
                        add_map.put("method", method);
                        add_map.put("url", url);
                        add_map.put("re", re);
                        add_map.put("info", info);
                        add_map.put("state", state);
                        YamlUtil.addYaml(add_map, yaml_path1);
                        Bfunc.show_yaml_view(burp, burp.views.get(type), type);
                        frame.dispose();

                    }
                });

                // no
                JButton No_button = new JButton("NO");
                No_button.setBounds(130, 245, 60, 20);
                xin.add(No_button);
                No_button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        frame.dispose();

                    }
                });


                frame.getContentPane().add(xin);
                frame.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);    // 设置模式类型。
                frame.setVisible(true);

            }
        });
    }


    private void load_button_Yaml(JButton Button_one) {
        Button_one.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Bfunc.show_yaml(burp);
            }
        });


    }


    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        $$$setupUI$$$();
        return one;
    }

}

